NgRX is a framework for building reactive applications using Angular
NgRx provides state management
NgRx isolates side effects

_______________________________________________________________________________________________________________
NgRx = Angular + Redux pattern

_______________________________________________________________________________________________________________
What is the Redux pattern

Helps an application manage its application state
The Redux pattern provides a one-way data flow throughout our application

A component view contains a checkbox
When a user checks the checkbox then the Product Code displays inside the view for each product
When a user unchecks the checkbox then the Product Code does not display inside the view for each product

Think of state a data at any point in time

User checks checkbox
Component View raises event to notify component
Component dispatches an action to a reducer
Think of a reducer as a dispatcher function
The reducer uses the action and the current state from the store to define new state
The reducer updates the store with the new state
The reducer never truly modifies state, instead the reducer only creates "new" state

The store is a client-side (in memory) state container
The store only stores application state during the execution of the application

A component can subscribe to the store using a selector
A component is notified by the store of any state changes
Think of a selector like a stored procedure that is used to query our store
A selector knows how to locate data inside the store
A selector knows how to return data from a store to a component

When new state is replaced inside the store
A component is notified of the new state
A component then updates new state values to bound controls inside the Component View




_______________________________________________________________________________________________________________
npm packages
@ngrx/store
@ngrx/store-devtools
@ngrx/effects

_______________________________________________________________________________________________________________

Goal of NgRX

1) Structure our applications
2) Manage state inside our applications
3) Organize state
4) Manage interactions with state

_______________________________________________________________________________________________________________
As applications get larger and larger an application needs to keep track of more and more state
As we add more features to our application it can become difficult to manage more and more interactions
Managing state can become challenging

_______________________________________________________________________________________________________________
By using a consistent pattern we give our applications a firm foundation and help stabalize our complex state management

_______________________________________________________________________________________________________________
What is state?

Information about the view
Whether to display specific ui elements inside our view
Whether to display specific fields inside our view
State can be user information
State can be a user's name
State can be a user's security role that is used to customize the application for that user
State can be product information
Product information may be originally retrieved from an application
Product information may be then later stored inside a product store
An application may dispatch actions to interact with the product store
State can be the currently selected product

_______________________________________________________________________________________________________________
The purpose of NgRX is to provide a formal pattern for organizing our application's state into a state container

A state store is the container that lives inside the browser
A state store stores state
One way data flow from application to state store
Anytime that a store is updated with new state then the state store notifies any components that need to know about state changes


_______________________________________________________________________________________________________________
Start with an application that does not use NgRx

Goal
Replace state management with NgRx techniques
Replace the component interactions with NgRx techniques
Build an appliation that uses NgRx to manage state
Build an application that uses NgRx for component communication

_______________________________________________________________________________________________________________
AppModule
  AppComponent
  ShellComponent
  MenuComponent
  WelcomeComponent

_______________________________________________________________________________________________________________
ProductModule
  ProductShellComponent
    ProductListComponent
    ProductEditComponent
  ProductService

_______________________________________________________________________________________________________________
UserModule
  LoginComponent
  AuthService

_______________________________________________________________________________________________________________
SharedModule
  Validators

_______________________________________________________________________________________________________________
First Look at NgRx

Install NgRx
Use NgRx to implement a simple sceario

showProductCode flag

When the user has checked the checkbox then the ProductListComponent HTML Template uses event binding to notify the
component

The ProductListComponent creates an action
The ProductListComponent dispatches the aciton to the reducer
Telling the reducer to toggle the showProductCode property
The reducer uses that action along with the existing store state to create new state
The new state contains the showProductCode property being set to true
The reducer returns the new state to the store
The ProductListComopnent is subscribing to the store
The store broadcasts the new state to all components that are subscribed to the store
ProductListComponent updates the value of the bound property showProductCode to true
Angular Change Detection runs and automatically updates the ProductListComponent HTML Template
Now the Product Code for each product inside the ProductListComponent HTML Template displays


_______________________________________________________________________________________________________________
Overview

Setup application
Install @ngrx/store
Initialize the store
Define the state that you want to keep track of
Define the actions
Create a reducer that will process actions and set store state
Dispatch an action from a component to request a state change
Subscribe to the store to get notified of state changes






_______________________________________________________________________________________________________________
Install npm package @ngrx/store

Think of the store as a container
Think of the store as an in-memory container for our application's state

Think of the store as a javascript object that represents all of the properties of an application
Think of the store as a javascript object that holds the properties for the application

Application level properties make up the state inside a store
Every component that needs to read the state goes to the store to get the state
This ensures that all components show consitent results when displaying the state of an application

If the user refreshes that browser, the state is not retained
Meaning that the store is only available within a browser session

If the user exists the application by closing their browser then the store is lost





_______________________________________________________________________________________________________________
Slices of state

Each feature state is added to the store state when a feature module is loaded




_______________________________________________________________________________________________________________
Initialize the store with its reducer

Associate the store with the reducer that creates state for that store
The reducers takes an action and uses the existing state to create new state
The reducer updates the store with the new state
Since AppModule is the Root Module we call the forRoot() method to initialize the store
We pass in a reference to the reducer
The store initialization associates a reducer with the store
The store initialization registers the store with the application

____________________________________________________________________________________________________________________
app.module.ts

// store
import { StoreModule } from '@ngrx/store';

imports: [
  // angular modules
  BrowserModule
  RouterModule
  // store
  StoreModule.forRoot(reducer)
]



_______________________________________________________________________________________________________________
We could have one reducer to manage the state inside our one store
We do not want one big file that acts a reducer for the entire application

Instead we will organize our state inside our store by feature
Each feature module will have its own reducer
Each feature state slice will correspond with a feature module
We will define slices of state inside our store
We will have one reducer for each feature slice of state

"app": {

},
"products: {

},
"users": {

}
"customers": {

}

Each reducer is now smaller and more focused
Each reducer is now easier to build
Each reducer is now easier to maintain
Each reducer is now easier to test

_______________________________________________________________________________________________________________
It is the combination of each feature slice state that makes up the application state at any give time





_______________________________________________________________________________________________________________
Initialize each Feature Module State using the feature module reducer

StoreModule.forFeature('products', productReducer)

'products' is the name of the feature slice
productReducer is the name of the reducer for the feature
productReducer is the name of the reducer that manages the 'products" feature slice of state


_______________________________________________________________________________________________________________
We could breakdown our feature slice even more by defining multiple feature reducers
Example we could have feature slice named 'products' that has two sub-feature slices under it named 'productList" and 'productData'
Each sub-feature slice represents a sub-feature slice of state
We would define one recducer for each sub-feature slice of state
Defining sub-feature slices of state helps us when each feature has lots of state to maintain
This allows us to break each of our reducers into smaller code

products: {
  productList: {
    showProductCode: true,
    currentProduct: {...}
  },
  productData: {
    products: [...],
    productTypes: [...]
  }
}

We would have 3 reducers
rootReducer
productListReducer
productDataReducer

To initialze the store using multiple reducers

StoreModule.forFeature('products',
  {
    productList: listReducer,
    productData: dataReducer
  }
)

each object is represented by key/value pairs
the key represents the sub slice of state
the value is the name of the reducer





_______________________________________________________________________________________________________________
For our application we will only have one 'products' feature slice inside our store that represents our application state

products: {
  showProductCode: true,
  currentProduct: {...}
  products: [...]
}

For our application we will only have one reducer named productReducer






_______________________________________________________________________________________________________________
Initialize the store inside AppModule to assocaiate the store with our application
We do not have a reducer for AppModule so we will pass an empty object as the reducer to the forRoot() method
We pass in a second empty object to the forRoot() method since we do not have any configuration needed for the root reducer


_______________________________________________________________________________________________________________
Initialize the StoreModule in every feature module that defines a slice of state

Open product.module.ts

import { StoreModule } from '@ngrx/store';

imports: [
  StoreModule.forFeature('products', {})
]




_______________________________________________________________________________________________________________
