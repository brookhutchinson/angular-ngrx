NgRX is a framework for building reactive applications using Angular
NgRx provides state management
NgRx isolates side effects

_______________________________________________________________________________________________________________
NgRx = Angular + Redux pattern

_______________________________________________________________________________________________________________
What is the Redux pattern

Helps an application manage its application state
The Redux pattern provides a one-way data flow throughout our application

A component view contains a checkbox
When a user checks the checkbox then the Product Code displays inside the view for each product
When a user unchecks the checkbox then the Product Code does not display inside the view for each product

Think of state a data at any point in time

User checks checkbox
Component View raises event to notify component
Component dispatches an action to a reducer
Think of a reducer as a dispatcher function
The reducer uses the action and the current state from the store to define new state
The reducer updates the store with the new state
The reducer never truly modifies state, instead the reducer only creates "new" state

The store is a client-side (in memory) state container
The store only stores application state during the execution of the application

A component can subscribe to the store using a selector
A component is notified by the store of any state changes
Think of a selector like a stored procedure that is used to query our store
A selector knows how to locate data inside the store
A selector knows how to return data from a store to a component

When new state is replaced inside the store
A component is notified of the new state
A component then updates new state values to bound controls inside the Component View




_______________________________________________________________________________________________________________
npm packages
@ngrx/store
@ngrx/store-devtools
@ngrx/effects

_______________________________________________________________________________________________________________

Goal of NgRX

1) Structure our applications
2) Manage state inside our applications
3) Organize state
4) Manage interactions with state

_______________________________________________________________________________________________________________
As applications get larger and larger an application needs to keep track of more and more state
As we add more features to our application it can become difficult to manage more and more interactions
Managing state can become challenging

_______________________________________________________________________________________________________________
By using a consistent pattern we give our applications a firm foundation and help stabalize our complex state management

_______________________________________________________________________________________________________________
What is state?

Information about the view
Whether to display specific ui elements inside our view
Whether to display specific fields inside our view
State can be user information
State can be a user's name
State can be a user's security role that is used to customize the application for that user
State can be product information
Product information may be originally retrieved from an application
Product information may be then later stored inside a product store
An application may dispatch actions to interact with the product store
State can be the currently selected product

_______________________________________________________________________________________________________________
The purpose of NgRX is to provide a formal pattern for organizing our application's state into a state container

A state store is the container that lives inside the browser
A state store stores state
One way data flow from application to state store
Anytime that a store is updated with new state then the state store notifies any components that need to know about state changes


_______________________________________________________________________________________________________________
Start with an application that does not use NgRx

Goal
Replace state management with NgRx techniques
Replace the component interactions with NgRx techniques
Build an appliation that uses NgRx to manage state
Build an application that uses NgRx for component communication

_______________________________________________________________________________________________________________
AppModule
  AppComponent
  ShellComponent
  MenuComponent
  WelcomeComponent

_______________________________________________________________________________________________________________
ProductModule
  ProductShellComponent
    ProductListComponent
    ProductEditComponent
  ProductService

_______________________________________________________________________________________________________________
UserModule
  LoginComponent
  AuthService

_______________________________________________________________________________________________________________
SharedModule
  Validators

_______________________________________________________________________________________________________________
Course Outline

Look at the Redux Pattern and understand the pieces of the Redux Pattern
Add NgRx to an application
How to use NgRx to manage state
Understand the NgRx Developer Tools (Time Travel Debugging)

_______________________________________________________________________________________________________________
Strongly type the state
Access state that is stored inside the NgRx store using selectors

Strongly type each action with action creators

_______________________________________________________________________________________________________________
Sometimes our actions require async operations or other operations
Example you may need to retrieve data from a backend server
Example you may need to update data that is stored on a backend server
Understand what are effects
Understand how to work with effects

_______________________________________________________________________________________________________________
Most applications provide the ability to create, read, update, and delete data
Understand how to provide create operations to create data using NgRx
Understand how to provide read operations to read data using NgRx
Understand how to provide update operations to update data using NgRx
Understand how to provide delete operations to delete data using NgRx

_______________________________________________________________________________________________________________
Understand how to use the OnPush Change Detection Strategy to improve performance of our application

_______________________________________________________________________________________________________________



_______________________________________________________________________________________________________________
The Redux Pattern

The Redux Pattern is used by NgRx

_______________________________________________________________________________________________________________
First Look at NgRx

Install NgRx
Use NgRx to implement the Redux Pattern

_______________________________________________________________________________________________________________
When the user checks the "Display Product Code" checkbox then
The ProductListComponent View uses event binding to notify the ProductListComponent

The ProductListComponent creates an action
The ProductListComopnent dispatches an action to the reducer (telling the reducer to toggle the showProductCode property)

The reducer uses the action along with the existing state that is stored inside the store to create new state
The new state is created by the reducer with the showProductCode property set to true
The reducer returns the new state to the store

The store broadcasts the new state to all components that are subscribed to the store
The ProductListComponent is a subscriber of the store
The store broadscasts the new state to the ProductListComponent

ProductListComponent updates the value of the showProductCode property with the value from the new state
Change Detection is run inside ProductListComponent
Change Detection updates the ProductListComponent HTML Template to show product codes next to each product name

_______________________________________________________________________________________________________________
Implement our first data flow using NgRx
Setup the application
Install @ngrx/store
Initialize the store for our application
Define the state to track
Define the actions that change that state
Build a reducer to process those actions
The reducer will set the store state

Inside ProductListCompoennt
Dispatch an action to change state
Subscribe to the store so that component receives state change notifications








_______________________________________________________________________________________________________________





_______________________________________________________________________________________________________________
